name: Deploy to EC2

on:
  push:
    branches: [ master ]

env:
  DOCKER_COMPOSE_VERSION: 1.29.2
  PROJECT_NAME: "C-Group"
  FRONTEND_PORT: 4000
  BACKEND_PORT: 9000
  DOMAIN: 54.236.65.244
  PROJECT_DIR: "/home/ubuntu/app/C-Group"
  POSTGRES_DATA_DIR: "/opt/C-Group/postgres-data"

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      # - name: Load environment variables
      #   uses: falti/dotenv-action@v1
      #   with:
      #     env-file: backend/.env

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: 'just-a-placeholder-so-we-dont-get-errors'

      - name: Copy files via SSH
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_INSTANCE_IP }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "./"
          target:  "${{ env.PROJECT_DIR }}"

      - name: Run nginx.sh on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_INSTANCE_IP }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            chmod +x "${{ env.PROJECT_DIR }}/devops/nginx.sh"
            "${{ env.PROJECT_DIR }}/devops/nginx.sh" "${{ env.PROJECT_NAME }}" "${{ env.FRONTEND_PORT }}" "${{ env.BACKEND_PORT }}" "${{ env.DOMAIN }}"

      - name: Move nginx config with sudo
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_INSTANCE_IP }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            sudo nginx -t && sudo systemctl reload nginx


      - name: Deploy application
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_INSTANCE_IP }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e  # Exit immediately if any command fails
            # Setup database directory
            sudo mkdir -p "${{ env.POSTGRES_DATA_DIR }}"
            sudo chown -R 1000:1000 "${{ env.POSTGRES_DATA_DIR }}"
            sudo chmod -R 755 "/opt/${{ env.PROJECT_NAME }}"
            # Set secure permissions for .env files
            cd "${{ env.PROJECT_DIR }}"
            sudo chmod +x devops/init-db.sh
            sudo chmod +x devops/cgroup-setup.sh
            sudo chmod 644 frontend/.env
            sudo chmod 644 backend/.env
            ./devops/cgroup-setup.sh "${{ env.PROJECT_NAME }}" "200000 100000" "2147483648"
            # Clean up and deploy with explicit env file
            docker-compose --env-file backend/.env down || true
            docker system prune -f
            # # Start Docker daemon in the cgroup 
            # sudo systemctl stop docker.socket docker.service
            # sudo pkill -9 dockerd || true
            # sleep 2  # Ensure Docker is fully stopped
            
            # # Start Docker in cgroup (foreground)
            # sudo cgexec -g cpu,memory:${{ env.PROJECT_NAME }} /usr/bin/dockerd > /tmp/dockerd.log 2>&1 &
            # DOCKERD_PID=$!
            # sleep 10  # Increased wait time
            
            # # Verify Docker is running
            # if ! docker info >/dev/null 2>&1; then
            #   echo "Docker failed to start. Logs:"
            #   cat /tmp/dockerd.log
            #   exit 1
            # fi
            
            # # Start containers
            # docker-compose --env-file backend/.env up -d --build
            # sleep 5  # Wait for containers to initialize
            
            # # Verify and assign PIDs
            # docker ps -q | xargs docker inspect --format '{{.State.Pid}} {{.Name}}' | while read pid name; do
            #   echo "Assigning $name (PID: $pid) to cgroup"
            #   echo $pid | sudo tee /sys/fs/cgroup/${{ env.PROJECT_NAME }}/cgroup.procs
            # done
            
            # # Final verification
            # echo "Current cgroup processes:"
            # cat /sys/fs/cgroup/${{ env.PROJECT_NAME }}/cgroup.procs
            # echo "Container stats:"
            # docker stats --no-stream

            # 4. Start containers normally
            docker-compose --env-file backend/.env up -d --build
            sleep 10  # Wait for full initialization
      
            # 5. Proper PID assignment - METHOD 1 (Recommended)
            # Assign only the container's main process
            for container in $(docker ps --format '{{.Names}}'); do
              pid=$(docker inspect --format '{{.State.Pid}}' $container)
              echo "Assigning $container (PID: $pid) to cgroup"
              # Move the entire process tree
              sudo sh -c "echo $pid > /sys/fs/cgroup/${{ env.PROJECT_NAME }}/cgroup.procs"
              # Verify
              if ! grep -q $pid /sys/fs/cgroup/${{ env.PROJECT_NAME }}/cgroup.procs; then
                echo "Failed to assign PID $pid for $container"
                exit 1
              fi
            done
      
            # 6. Clean up any stray PIDs (METHOD 2 - Alternative)
            # Get the correct container PIDs
            container_pids=$(docker ps -q | xargs docker inspect --format '{{.State.Pid}}')
            # Filter cgroup.procs to only contain our containers
            sudo sh -c "comm -23 <(sort /sys/fs/cgroup/${{ env.PROJECT_NAME }}/cgroup.procs) <(echo \"$container_pids\" | sort) | while read pid; do echo $pid > /sys/fs/cgroup/cgroup.procs; done"
      
            # 7. Final verification
            echo "üîç Active PIDs in cgroup:"
            sudo cat /sys/fs/cgroup/${{ env.PROJECT_NAME }}/cgroup.procs
            echo "üìä Container stats:"
            docker stats --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}"
